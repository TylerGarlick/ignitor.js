"use strict";
Object.defineProperties(exports, {
  Model: {get: function() {
      return Model;
    }},
  __esModule: {value: true}
});
var $__database__;
var Promise = require('bluebird'),
    _ = require('lodash'),
    Validator = require('jsonschema').validate;
var database = ($__database__ = require("./database"), $__database__ && $__database__.__esModule && $__database__ || {default: $__database__}).database;
var Model = function Model(collection, properties) {
  this._key = null;
  this._rev = null;
  this._id = null;
  this.collection = collection;
  this.properties = properties;
  this.methods = {};
  this.db = Promise.promisifyAll(database.db);
  this.hooks = {
    validating: {
      pre: [],
      post: []
    },
    saving: {
      pre: [],
      post: []
    },
    deletion: {
      pre: [],
      post: []
    }
  };
};
var $Model = Model;
($traceurRuntime.createClass)(Model, {
  get isNew() {
    return !this._id && !this._key;
  },
  get errors() {
    var validationErrors = [];
    if (this.properties)
      return Validator(this, {
        type: 'object',
        properties: this.properties
      }).errors || validationErrors;
    return validationErrors;
  },
  get isValid() {
    return this.errors.length > 0;
  }
}, {
  all: function(options) {
    return this.db.simple.listAsync(this.collection, options);
  },
  findByKey: function(id) {
    return this.db.simple.firstByExampleAsync(this.collection, {_key: id});
  },
  find: function(predicate) {
    var options = arguments[1] !== (void 0) ? arguments[1] : {};
    return this.db.simple.exampleAsync(this.collection, predicate, options);
  },
  query: function(query) {
    var params = arguments[1] !== (void 0) ? arguments[1] : {};
    var options = arguments[2] !== (void 0) ? arguments[2] : {};
    return this.db.query.execAsync(query, params, options);
  },
  exists: function(predicate) {
    var options = arguments[1] !== (void 0) ? arguments[1] : {};
    return this.db.simple.firstByExampleAsync(this.collection, predicate, options);
  },
  save: function(entity) {
    var options = arguments[1] !== (void 0) ? arguments[1] : {
      createCollection: true,
      waitForSync: true
    };
    if (entity._id) {
      if (entity._id)
        delete entity._id;
      if (entity._key)
        delete entity._key;
      if (entity._rev)
        delete entity._rev;
      return this.db.document.putAsync(entity._id, entity).then(this.single(entity._id));
    } else
      return this.db.createAsync(this.collection, entity, options).then(this.single(entity._id));
  },
  delete: function(id) {
    var options = arguments[1] !== (void 0) ? arguments[1] : {};
    return this.db.document.deleteAsync(id, options);
  },
  deleteAll: function(predicate) {
    var options = arguments[1] !== (void 0) ? arguments[1] : {};
    return this.db.simple.removeByExampleAsync(this.collection, predicate, options);
  },
  initialize: function(collection, schema) {
    var options = arguments[2] !== (void 0) ? arguments[2] : {};
    var Stereotype = function Stereotype(instance) {
      $traceurRuntime.superCall(this, $Stereotype.prototype, "constructor", [collection, schema]);
      _.merge(this, instance);
      _.merge(this, this.methods);
    };
    var $Stereotype = Stereotype;
    ($traceurRuntime.createClass)(Stereotype, {}, {}, $Model);
    if (options.statics) {
      _.merge(Stereotype, options.statics);
    }
    return Stereotype;
  }
});

//# sourceMappingURL=data:application/json;base64,